#!/bin/sh

parse_yaml() {
    local prefix=$2
    local s
    local w
    local fs
    s='[[:space:]]*'
    w='[a-zA-Z0-9_]*'
    fs="$(echo @|tr @ '\034')"
    sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s[:-]$s\(.*\)$s\$|\1$fs\2$fs\3|p" "$1" |
    awk -F"$fs" '{
      indent = length($1)/7;
      if (length($2) == 0) { conj[indent]="+";} else {conj[indent]="";}
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
              vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
              printf("%s%s%s%s=(\"%s\")\n", "'"$prefix"'",vn, $2, conj[indent-1],$3);
      }
    }' | sed 's/_=/+=/g'
}

PROGNAME=$(basename $0)
VERSION="2.1.0"
DIR=$(cd $(dirname $0); pwd)
UNDERSCORE=$DIR/bower_components/_s
SAGE=$DIR/bower_components/sage
GENERICONS=$DIR/bower_components/Genericons
FONTAWESOME=$DIR/bower_components/font-awesome
BOOTSTRAP=$DIR/bower_components/bootstrap-sass/assets
FOUNDATION=$DIR/bower_components/foundation/scss
WP_THEMES_DIR=$DIR/wp-content/themes

eval $(parse_yaml $DIR/site.yml CONFIG_)

THEMES_DIR=$WP_THEMES_DIR/$CONFIG_theme_dir_name

usage() {
    echo "Usage: $PROGNAME [OPTIONS] FILE"
    echo "  This script is ~."
    echo
    echo "Options:"
    echo "  -h, Help"
    echo "  -v, Version"
    echo "  -i, Install"
    echo "  -s, Start"
    echo
    exit 1
}

for OPT in $*
do
    case $OPT in
        '-h' )
            usage
            exit 1
            ;;
        '-v' )
            echo $VERSION
            exit 1
            ;;
        '-i' )
            FLAG_i=1
            ;;
        '-s' )
            FLAG_s=1
            shift 2
            ;;
        *)
            echo "Internal error!" 1>&2
            exit 1
            ;;
    esac
    shift
done

install_underscore() {
    rm -rf $UNDERSCORE
    npm run bower install https://github.com/Automattic/_s.git
    mkdir -p $THEMES_DIR/languages/
    mkdir -p $THEMES_DIR/inc/
    mkdir -p $THEMES_DIR/template-parts/
    cp -r $UNDERSCORE/*.php $THEMES_DIR/
    cp -r $UNDERSCORE/*.md $THEMES_DIR/
    cp -r $UNDERSCORE/inc/*.php $THEMES_DIR/inc/
    cp -r $UNDERSCORE/template-parts/*.php $THEMES_DIR/template-parts/
    cp $UNDERSCORE/languages/* $THEMES_DIR/languages/
    cp $UNDERSCORE/js/*.js $THEMES_DIR/_source/js/
}

install_sage() {
    rm -rf $SAGE
    npm run bower install https://github.com/roots/sage.git
    mkdir -p $THEMES_DIR/lang/
    mkdir -p $THEMES_DIR/lib/
    mkdir -p $THEMES_DIR/templates/
    cp -r $SAGE/*.php $THEMES_DIR/
    cp -r $SAGE/*.md $THEMES_DIR/
    cp -r $SAGE/lib/*.php $THEMES_DIR/lib/
    cp -r $SAGE/templates/*.php $THEMES_DIR/templates/
    cp -r $SAGE/assets/styles/ $THEMES_DIR/_source/scss/
    cp $SAGE/lang/* $THEMES_DIR/lang/
    cp $SAGE/assets/scripts/*.js $THEMES_DIR/_source/js/
    mv $THEMES_DIR/_source/scss/main.scss $THEMES_DIR/_source/scss/style.scss
    cp $DIR/_source/scss/sage/*.scss $THEMES_DIR/_source/scss/
    rm -rf $THEMES_DIR/_source/scss/_editor.scss
}

install_genericons() {
    mkdir -p $DIR/.tmp/genericons/
    curl -LOk http://genericons.com/wp-content/themes/a8c/genericons/genericons.zip
    unzip genericons.zip -d $DIR/.tmp/genericons/
    mkdir -p $THEMES_DIR/_source/font/genericons/
    cp $DIR/.tmp/genericons/genericons/* $THEMES_DIR/_source/font/genericons/
    rm -rf $THEMES_DIR/_source/font/genericons/*.css
    cp $DIR/_source/scss/genericons/*.scss $THEMES_DIR/_source/scss/
}

install_fontawesome() {
    $DIR/node_modules/.bin/bower install fontawesome
    mkdir -p $THEMES_DIR/_source/scss/fontawesome/
    mkdir -p $THEMES_DIR/_source/font/fontawesome/
    cp $FONTAWESOME/scss/*.scss $THEMES_DIR/_source/scss/fontawesome/
    mv $THEMES_DIR/_source/scss/fontawesome/font-awesome.scss $THEMES_DIR/_source/scss/_fontawesome.scss
    cp $FONTAWESOME/fonts/* $THEMES_DIR/_source/font/fontawesome/
}

# TODO: いくつかのFunctionに分割
# TODO: if を case に変えられるところは変える
vavg_setup() {
    echo "VAVG のセットアップを開始します。"

    mkdir $DIR/.tmp/

    if [ ! -x "`which vagrant`" ]; then
        echo "Vagrant がインストールされていません。"
        if [ "$(uname)" == "Darwin" ]; then
            echo "※OS X で Homebrew を利用している場合、brew cask でもインストール可能です。"
        fi
        echo ""
    fi

    if [ ! -x "`which ruby`" ] || [ ! -x "`which gem`" ]; then
        echo "Ruby または gem コマンドがインストールされていません。"
        echo "gem コマンドは、通常 Ruby と一緒にインストールされます。"
        echo ""
    fi

    if [ ! -x "`which node`" ] || [ ! -x "`which npm`" ]; then
        echo "Node.js または npm コマンドがインストールされていません。"
        echo "npm コマンドは、通常 Node.js と一緒にインストールされます。"
        echo ""
    fi

    if [ ! -x "`which convert`" ]; then
        echo "ImageMagick がインストールされていません。"
        echo ""
    fi

    if [ ! -x "`which sass`" ]; then
        if [ ! -x "`which sass`" ] && [ -x "`which gem`" ]; then
            FLAG_sass=1
        fi

        if [ "$FLAG_sass" ] && [ "$(uname)" == "Darwin" ]; then
            sudo gem install sass
        elif [ "$FLAG_sass" ]; then
            gem install sass
        fi

        if [ "$FLAG_sass" ] && [ -x "`which rbenv`" ]; then
            rbenv rehash
        fi

        if [ ! -x "`which sass`" ]; then
            echo "Sass のインストールを試みましたが、インストールに失敗しました。"
            echo "手動で '$ sudo gem install sass' を実行してください。"
            echo "rbenv で Ruby を管理している場合、Sass インストール完了後 '$ rbenv rehash' を実行してください。"
            exit 1
        fi
    fi

    if [ ! -x "`which compass`" ]; then
        if [ ! -x "`which compass`" ] && [ -x "`which gem`" ]; then
            FLAG_compass=1
        fi

        if [ "$FLAG_compass" ] && [ "$(uname)" == "Darwin" ]; then
            sudo gem install compass
        elif [ "$FLAG_compass" ]; then
            gem install compass
        fi

        if [ "$FLAG_compass" ] && [ -x "`which rbenv`" ]; then
            rbenv rehash
        fi

        if [ ! -x "`which compass`" ]; then
            echo "Compass のインストールを試みましたが、インストールに失敗しました。"
            echo "手動で '$ sudo gem install compass' を実行してください。"
            echo "rbenv で Ruby を管理している場合、Compass インストール完了後 '$ rbenv rehash' を実行してください。"
            exit 1
        fi
    fi

    if [ ! -e bower.json ]; then
        echo "bower.json がありません。"
    fi

    if [ ! -e package.json ]; then
        echo "package.json がありません。"
    fi

    if [ ! -e gulpfile.js ]; then
        echo "gulpfile.js がありません。"
    fi

    if [ ! -e ".csscomb.json" ]; then
        echo ".csscomb.json がありません。"
    fi

    if [ ! -x "`which vagrant`" ] || [ ! -x "`which node`" ] || [ ! -x "`which npm`" ] || [ ! -x "`which ruby`" ] || [ ! -x "`which gem`" ] || [ ! -x "`which convert`" ] || [ ! -x "`which sass`" ] || [ ! -x "`which compass`" ] || [ ! -e bower.json ] || [ ! -e package.json ] || [ ! -e gulpfile.js ] || [ ! -e ".csscomb.json" ]; then
        exit 1
    fi

    npm install
    $DIR/node_modules/.bin/bower install

    mkdir -p $THEMES_DIR/_source/scss/
    mkdir -p $THEMES_DIR/_source/js/
    mkdir -p $THEMES_DIR/_source/font/
    mkdir -p $THEMES_DIR/_source/img/
    mkdir -p $THEMES_DIR/assets/
    cp -r $DIR/_source/scss/*.scss $THEMES_DIR/_source/scss/
    cp -r $DIR/bower_components/normalize-scss/_normalize.scss $THEMES_DIR/_source/scss/
    cp -r $DIR/_source/js/ $THEMES_DIR/_source/js/

    if [ $CONFIG_bootstrap == true || $CONFIG_wp_starter_theme == "sage" ]; then
        $DIR/node_modules/.bin/bower install bootstrap-sass-official
        # cp $BOOTSTRAP/stylesheets/_bootstrap-sprockets.scss $THEMES_DIR/_source/scss/
        cp $BOOTSTRAP/stylesheets/_bootstrap.scss $THEMES_DIR/_source/scss/
        cp -r $BOOTSTRAP/fonts/* $THEMES_DIR/_source/font/
        cp $DIR/_source/scss/bootstrap/*.scss $THEMES_DIR/_source/scss/
    else
        $DIR/node_modules/.bin/bower install foundation
        cp $FOUNDATION/foundation.scss $THEMES_DIR/_source/scss/_foundation.scss
        cp $FOUNDATION/foundation/_settings.scss $THEMES_DIR/_source/scss/_settings.scss
        cp $DIR/_source/scss/foundation/*.scss $THEMES_DIR/_source/scss/
    fi

    case $CONFIG_web_font in
        "genericons")
            install_genericons
            ;;
        "genericons")
            install_genericons
            ;;
    esac

    case $CONFIG_wp_starter_theme in
        "underscore")
            install_underscore
            ;;
        "sage")
            install_sage
            ;;
        *)
            cp -r $DIR/_source/wordpress-theme/default/ $THEMES_DIR/
            ;;
    esac

    if [ $CONFIG_wp_starter_theme != "underscore" ] && [ $CONFIG_wp_starter_theme != "sage" ] && [ $CONFIG_bootstrap == false ]; then
        cp -r $DIR/_source/wordpress-theme/vavg/ $THEMES_DIR/
    fi

    if [ "$(uname)" == "Darwin" ]; then
        if [ ! -x "`which VBoxManage`" ]; then
            echo "VirtualBox がインストールされていません。"
            echo "VirtualBox をインストールしてください。"
            echo "※OS X で Homebrew を利用している場合、brew cask でもインストール可能です。"
            exit 1
        fi
    else
        if [ ! -e "C:\Program Files\Oracle\VirtualBox\VBoxManage.exe" ]; then
            echo "VirtualBox がインストールされていません。"
            echo "VirtualBox をインストールしてください。"
            exit 1
        fi
    fi

    latest=`curl -sI https://github.com/vccw-team/vccw/releases/latest | awk -F'/' '/^Location:/{print $NF}' | tr -d '\r'`

    if [ ! -e ${latest}.zip ]; then
        curl -LOk https://github.com/vccw-team/vccw/archive/${latest}.zip
    fi

    if [ ! -e ${latest}.zip ]; then
        echo "VCCW をダウンロードできませんでした。"
        exit 1
    fi

    unzip ${latest}.zip -d ./
    rm -rf ${latest}.zip
    cp -rf ./vccw-${latest}/* ./
    rm -rf ./vccw-${latest}/

    if ! vagrant plugin list | grep -o "vagrant-hostsupdater" >/dev/null; then
        vagrant plugin install vagrant-hostsupdater
    fi

    if ! vagrant plugin list | grep -o "vagrant-share" >/dev/null; then
        vagrant plugin install vagrant-share
    fi

    vagrant up

    if [ ! "$FLAG_s" ]; then
        vagrant halt
    fi

    $DIR/node_modules/.bin/gulp install
    rm -rf $DIR/_source/

    echo "VAVG のインストールが完了しました。"
}

if [ "$FLAG_i" ]; then
    vavg_setup
fi

if [ "$FLAG_s" ]; then
    echo "VAVG を起動します。"

    if [ ! "$FLAG_i" ]; then
        vagrant up
    fi

    $DIR/node_modules/.bin/gulp default
fi
