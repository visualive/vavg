#!/bin/sh
PROGNAME=$(basename $0)
VERSION="1.0.4"
DIR=$(cd $(dirname $0); pwd)

usage() {
    echo "Usage: $PROGNAME [OPTIONS] FILE"
    echo "  This script is ~."
    echo
    echo "Options:"
    echo "  -h, Help"
    echo "  -v, Version"
    echo "  -i, Install"
    echo "  -s, Start"
    echo
    exit 1
}

for OPT in $*
do
    case $OPT in
        '-h' )
            usage
            exit 1
            ;;
        '-v' )
            echo $VERSION
            exit 1
            ;;
        '-i' )
            FLAG_i=1
            ;;
        '-s' )
            FLAG_s=1
            shift 2
            ;;
        *)
            echo "Internal error!" 1>&2
            exit 1
            ;;
    esac
    shift
done

if [ "$FLAG_i" ]; then
    if [ ! -x "`which vagrant`" ]; then
        echo "Vagrant がインストールされていません。"
        echo ""
    fi

    if [ ! -x "`which node`" ] || [ ! -x "`which npm`" ]; then
        echo "Node.js または npm コマンドがインストールされていません。"
        echo "npm コマンドは、通常 Node.js と一緒にインストールされます。"
        echo ""
    fi

    if [ ! -x "`which node`" ] || [ ! -x "`which gem`" ]; then
        echo "Ruby または gem コマンドがインストールされていません。"
        echo "gem コマンドは、通常 Ruby と一緒にインストールされます。"
        echo ""
    fi

    if [ ! -x "`which convert`" ]; then
        echo "ImageMagick がインストールされていません。"
        echo ""
    fi

    if [ ! -x "`which sass`" ]; then
        if [ ! -x "`which sass`" ] && [ -x "`which gem`" ]; then
            FLAG_sass=1
        fi

        if [ "$FLAG_sass" ] && [ -x "`rbenv`" ]; then
            gem install sass
            rbenv rehash
        elif [ "$FLAG_sass" ] && [ "$(uname)" == "Darwin" ]; then
            sudo gem install sass
        elif [ "$FLAG_sass" ]; then
            gem install sass
        fi

        if [ ! -x "`which sass`" ]; then
            echo "Sass のインストールを試みましたが、インストールに失敗しました。"
        fi
    fi

    if [ ! -x "`which compass`" ]; then
        if [ ! -x "`which compass`" ] && [ -x "`which gem`" ]; then
            FLAG_compass=1
        fi

        if [ "$FLAG_compass" ] && [ -x "`rbenv`" ]; then
            gem install compass
            rbenv rehash
        elif [ "$FLAG_compass" ] && [ "$(uname)" == "Darwin" ]; then
            sudo gem install compass
        elif [ "$FLAG_compass" ]; then
            gem install compass
        fi

        if [ ! -x "`which compass`" ]; then
            echo "Compass のインストールを試みましたが、インストールに失敗しました。"
        fi
    fi

    if [ ! -x "`which vagrant`" ] || [ ! -x "`which node`" ] || [ ! -x "`which npm`" ] || [ ! -x "`which ruby`" ] || [ ! -x "`which gem`" ] || [ ! -x "`which convert`" ] || [ ! -x "`which sass`" ] || [ ! -x "`which compass`" ]; then
        exit 1
    fi

    if [ ! -x "`which bower`" ] && [ "$(uname)" == "Darwin" ]; then
        sudo npm install -g bower
    elif [ ! -x "`which bower`" ]; then
        npm install -g bower
    fi

    if [ ! -x "`which bower`" ]; then
        echo "Bower のインストールを試みましたが、インストールに失敗しました。"
        exit 1
    fi

    if [ ! -x "`which gulp`" ] && [ "$(uname)" == "Darwin" ]; then
        sudo npm install –g gulp
    elif [ ! -x "`which gulp`" ]; then
        npm install –g gulp
    fi

    if [ ! -x "`which gulp`" ]; then
        echo "Gulp のインストールを試みましたが、インストールに失敗しました。"
        exit 1
    fi

    if [ ! -e bower.json ]; then
        echo "bower.json がありません。"
    fi

    if [ ! -e package.json ]; then
        echo "package.json がありません。"
    fi

    if [ ! -e gulpfile.js ]; then
        echo "gulpfile.js がありません。"
    fi

    if [ ! -e config.rb ]; then
        echo "config.rb がありません。"
    fi

    if [ ! -e csscomb.json ]; then
        echo "csscomb.json がありません。"
    fi

    if [ ! -e bower.json ] || [ ! -e package.json ] || [ ! -e gulpfile.js ] || [ ! -e config.rb ] || [ ! -e csscomb.json ]; then
        exit 1
    fi

    bower install

    if [ "$(uname)" == "Darwin" ]; then
        sudo npm install
    else
        npm install
    fi

    gulp vavg

    if [ "$(uname)" == "Darwin" ]; then
        sudo npm install
    else
        npm install
    fi

    if [ "$(uname)" == "Darwin" ]; then
        if [ ! -x "`which VBoxManage`" ]; then
            echo "VirtualBox がインストールされていません。"
            echo "VirtualBox 4.3.30 をインストールしてください。"
            echo "Download: https://www.virtualbox.org/wiki/Download_Old_Builds_4_3"
            echo "※OS X の場合で Homebrew を利用している場合、Homebrew cask でもインストール可能です。"
            exit 1
        fi
    else
        if [ ! -e "C:\Program Files\Oracle\VirtualBox\VBoxManage.exe" ]; then
            echo "VirtualBox がインストールされていません。"
            echo "VirtualBox 4.3.30 をインストールしてください。"
            echo "Download: https://www.virtualbox.org/wiki/Download_Old_Builds_4_3"
            exit 1
        fi
    fi

    latest=`curl -sI https://github.com/vccw-team/vccw/releases/latest | awk -F'/' '/^Location:/{print $NF}' | tr -d '\r'`
    wget https://github.com/vccw-team/vccw/archive/${latest}.zip

    if [ ! -e ${latest}.zip ];
    then
        echo "VCCW をダウンロードできませんでした。"
        exit 1
    fi

    unzip ${latest}.zip -d ./
    rm -rf ${latest}.zip
    cp -rf ./vccw-${latest}/* ./
    rm -rf ./vccw-${latest}/

    if ! vagrant plugin list | grep -o "vagrant-hostsupdater" >/dev/null; then
        vagrant plugin install vagrant-hostsupdater
    fi

    if ! vagrant plugin list | grep -o "vagrant-share" >/dev/null; then
        vagrant plugin install vagrant-share
    fi

    vagrant up

    if [ ! "$FLAG_s" ]; then
        vagrant halt
    fi
    echo "VAVG のインストールが完了しました。"
fi

if [ "$FLAG_s" ]; then
    echo "VAVG を起動します。"

    if [ ! "$FLAG_i" ]; then
        vagrant up
    fi

    gulp
fi
