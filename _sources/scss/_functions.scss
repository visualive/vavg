// Default Color Palette
$color-palette: (
    primary: (
        lightest: #fffbfb,
        lighter: #fffbfb,
        light: #feeeed,
        base: #eebbcb,
        dark: #ff66b2,
        darker: #ff66b2,
        darkest: #ff66b2
    ),
    secondary: (
        lightest: #666666,
        lighter: #666666,
        light: #666666,
        base: #666666,
        dark: #232a34,
        darker: #1c222a,
        darkest: #1c222a
    )
) !default;

/**
 * Function defining the difference between 2 colors
 *
 * @Link http://www.sitepoint.com/using-sass-build-color-palettes/
 *
 * @param {Color} $a - first color
 * @param {Color} $b - second color
 *
 * @return {Map}  The color operations to do in order to find $b from $a where keys are the color functions to apply and values are the values to pass to these functions
 */
@function color-diff($a, $b) {
  $sat: saturation($a) - saturation($b);
  $lig:  lightness($a) -  lightness($b);
  $fn-sat: if($sat > 0, 'desaturate', 'saturate');
  $fn-lig: if($lig > 0, 'darken', 'lighten');

  @return (
      adjust-hue: -(hue($a) - hue($b)),
      #{$fn-sat}: abs($sat),
      #{$fn-lig}: abs($lig)
  );
}

/**
 * Compute the diff for each color from the initial palette
 *
 * @Link http://www.sitepoint.com/using-sass-build-color-palettes/
 *
 * @param {Map} $palette - palette
 *
 * @requires {function} color-diff
 *
 * @return {List} list of diffs
 */
@function palette-diff($palette) {
  $base: map-get($palette, base);
  $colors: map-get($palette, colors);

  $diffs: ();

  @each $color in $colors {
    $diffs: append($diffs, color-diff($base, $color));
  }

  @return $diffs;
}

/**
 * Apply differences returned from `color-diff` function to a color in order to retrieve the second color
 *
 * @Link http://www.sitepoint.com/using-sass-build-color-palettes/
 *
 * @param {Color} $color - color to transform
 * @param {Map} $diff - diff map
 *
 * @return {Color} transformed color
 */
@function apply-diff($color, $diff) {
  // We call the $key (function),
  // passing the $color and the $value as parameters
  // e.g. `call(adjust-hue, #BADA55, 42)`
  @each $key, $value in $diff {
    $color: call($key, $color, $value);
  }

  @return $color;
}

/**
 * Create a palette from a base color
 *
 * @Link http://www.sitepoint.com/using-sass-build-color-palettes/
 *
 * @param {Color} $base-color - base color for the palette
 *
 * @requires {function} palette-diff
 * @requires {function} apply-diff
 * @requires {variable} $base-palette
 *
 * @return {List} list of colors
 */
@function create-palette($base-color) {
  $colors: ();
  $base-palette: (
      base: #FF6351,
      colors: #CFDFE8 #BFB9C3 #CF9192 #FF6351 #BF4A3C #7F3128 #732C24
  );
  $palette-diffs: palette-diff($base-palette);

  @each $diff in $palette-diffs {
    $colors: append($colors, apply-diff($base-color, $diff));
  }

  @return $colors;
}

/**
 * Create a list of colors from the base color
 * then turn in into a map with explicit keys
 *
 * @Link http://www.sitepoint.com/using-sass-build-color-palettes/
 *
 * @param {Color} $base-color - base color for the palette
 *
 * @requires {function} create-palette
 *
 * @return {Map}
 */
@function palette($base-color) {
  $colors: create-palette($base-color);
  $keys: 'lightest' 'lighter' 'light' 'base' 'dark' 'darker' 'darkest';
  $palette: ();

  @for $i from 1 through min(length($colors), length($keys)) {
    $palette: map-merge($palette, (nth($keys, $i): nth($colors, $i)));
  }

  @return $palette;
}

/**
 * Brightness
 *
 * @Link https://meta.discourse.org/t/programmatically-adjusting-color-variables-with-sass/18332
 *
 * @param {Color} $color - base color
 *
 * @return {Int}
 */
@function brightness($color) {
  @return ((red($color) * .299) + (green($color) * .587) + (blue($color) * .114));
}

/**
 * Contrast
 *
 * @Link https://meta.discourse.org/t/programmatically-adjusting-color-variables-with-sass/18332
 *
 * @param {Color} $color1
 * @param {Color} $color2
 *
 * @return {Color}
 */
@function contrast($color1, $color2) {
  @if (abs(brightness($color1) - brightness($color2)) < 40 )   {
    @return darken($color2, 50%);
  }
  @else {
    @return $color2;
  }
}

/**
 * Color
 *
 * @param {Color}  $color
 * @param {String} $key
 * @param {Map}    $palette
 *
 * @return {Color}
 */
@function color($color, $key: 'base', $palette: null) {
  @if null == $palette {
    $colors: create-palette($color);

    @return map-get($colors, $key);
  }
  @else {
    @return map-get(map-get($palette, $color), $key);
  }
}
